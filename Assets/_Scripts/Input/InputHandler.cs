using System;
using UnityEngine;
using UnityEngine.InputSystem;

namespace Assets._Scripts.Input
{
    public class InputHandler : MonoBehaviour
    {
        public Vector2 MovementInput { get; private set; }
        public Vector2 LookInput { get; private set; }
        public bool JumpPressed { get; private set; }
        public bool JumpHeld { get; private set; }
        public event Action OnJumpPressed;
        private PlayerInputActions _inputActions;
        private static InputHandler _instance;
        public static InputHandler Instance => _instance;

        private void Awake()
        {
            if (_instance is not null)
            {
                Destroy(_instance);
            }
            _instance = this;
        }

        /// <summary>
        /// Subscribe to events broadcasted from PlayerInputActions, generated by the Input System
        /// </summary>
        private void OnEnable()
        {
            if (_inputActions == null)
            {
                _inputActions = new PlayerInputActions();
            }

            _inputActions.Player.Enable();
            _inputActions.UI.Enable();

            // Subscribe to input events

            _inputActions.Player.Move.performed += OnMovePerformed;
            _inputActions.Player.Move.canceled += OnMoveCanceled;
            _inputActions.Player.Jump.performed += OnJumpPerformed;
            _inputActions.Player.Jump.canceled += OnJumpCanceled;
        }

        private void OnDisable()
        {
            _inputActions.Player.Move.performed -= OnMovePerformed;
            _inputActions.Player.Move.canceled -= OnMoveCanceled;
            _inputActions.Player.Jump.performed -= OnJumpPerformed;
            _inputActions.Player.Jump.canceled -= OnJumpCanceled;
            _inputActions.Player.Disable();
        }

        private void Update()
        {
            // Reset JumpPressed after it has been read
            if (JumpPressed)
            {
                JumpPressed = false;
            }
        }

        /// <summary>
        /// Broadcast horizontal movement.
        /// </summary>
        private void OnMovePerformed(InputAction.CallbackContext context)
        {
            MovementInput = context.ReadValue<Vector2>();
            Debug.Log(MovementInput);
        }

        /// <summary>
        /// No horizontal movement input detected this frame, hold at zero.
        /// </summary>
        private void OnMoveCanceled(InputAction.CallbackContext context)
        {
            MovementInput = Vector2.zero;
        }

        /// <summary>
        /// Broadcast that the jump key was pressed.
        /// Flag JumpHeld as true, if it was just a press it will be flipped next frame
        /// when the down key is no longer detected and OnJumpCanceled in invoked.
        /// </summary>
        private void OnJumpPerformed(InputAction.CallbackContext context)
        {
            // JumpPressed = true;
            JumpHeld = true;
            OnJumpPressed?.Invoke();
        }

        /// <summary>
        /// No jump key detected, flag JumpHeld as false
        /// </summary>
        private void OnJumpCanceled(InputAction.CallbackContext context)
        {
            JumpHeld = false;
        }
    }

}